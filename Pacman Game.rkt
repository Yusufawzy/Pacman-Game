#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 97 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 24 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 88 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 1 0 0 0 0 0 0.6 0.6 0.6 0.0 0.0 0.0 189 153 153
199 203 156 -1 -1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Fira Code\0"
0.0 26 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 15 #"NK57 Monospace\0"
0.0 26 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 15 #"NK57 Monospace\0"
0.0 22 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 15 #"NK57 Monospace\0"
0.0 32 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 27 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 6536 0 4 3 85
(4
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(5
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 183
(6
 #"#reader(lib \"htdp-beginner-reader.ss\" \"lang\")((modname |Pacman G"
 #"ame|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t c"
 #"onstructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 20 #"; Name: Yusuf Elnady"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 9 #"lang/posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"overlap.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 119
(7
 #";-------------------------------------------------------------------"
 #"---------------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 44 #"; make-team : string, number, number -> team"
0 0 24 29 1 #"\n"
0 0 17 3 92
(8
 #";    interpretation: `name` is the name of the team; `offense` is th"
 #"e team's offense rating;"
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#";;                   `defense` is the team's defense rating"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;1-Data Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"pacman"
0 0 24 3 2 #" ("
0 0 14 3 4 #"tick"
0 0 24 3 1 #" "
0 0 14 3 3 #"age"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 14 3 8 #"next-dir"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 5 #"score"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 73
(9
 #"; make-pacman : number, number, number, direction, posn, number -> p"
 #"acman"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(10
 #";    interpretation: `tick` an abstract amount of time between two f"
 #"rames in seconds;"
) 0 0 24 29 1 #"\n"
0 0 17 3 111
(11
 #";;                   `age` a number represents the age and would be "
 #"useful to change how wide-open is the mouth"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(12
 #";;                   `dir` stores the current direction the pacman i"
 #"s moving to"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(13
 #";;                   `next-dir` stores the next direction of the pac"
 #"man "
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(14
 #";;                   `position` is a posn struct, contains (x,y) of "
 #"the pacman, units are pixels"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(15
 #";;                   `score` a number represents the current score i"
 #"n the game."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;2-Examples of data"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;3-Template"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pacman-processing"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 11 #"pacman-tick"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 10 #"pacman-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 10 #"pacman-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-next-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 12 #"pacman-score"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 4 #" ) )"
0 0 24 29 1 #"\n"
0 0 17 3 119 7 0 0 24 29 1 #"\n"
0 0 17 3 43 #";;1-Data Definition: A direction is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 1 17 65 1 #"\t"
0 0 17 3 63
#"- \"right\" (interpretation: moves by one pixel to the right), OR"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 1 17 65 1 #"\t"
0 0 17 3 62
#"- \"left\"  (interpretation: moves by one pixel to the left), OR"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 1 17 65 1 #"\t"
0 0 17 3 60
#"- \"up\"    (interpretation: moves by one pixel to the up), OR"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 1 17 65 1 #"\t"
0 0 17 3 60
#"- \"down\"  (interpretation: moves by one pixel to the bottom)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;2-Examples"
0 0 24 29 1 #"\n"
0 0 19 3 7 #"\"right\""
0 0 24 29 1 #"\n"
0 0 19 3 6 #"\"left\""
0 0 24 29 1 #"\n"
0 0 19 3 4 #"\"up\""
0 0 24 29 1 #"\n"
0 0 19 3 6 #"\"down\""
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;3-Template"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"function-for-direction"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #"] "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; direction->action : direction -> posn"
0 0 24 29 1 #"\n"
0 0 17 3 78
(16
 #"; takes a direction and returns a posn struct representing the given"
 #" direction"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"direction->action"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"+1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"+1"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"direction->action"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"+1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"direction->action"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"direction->action"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"direction->action"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"+1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; direction->angle : direction -> integer"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; Return an angle to rotate a figure by, based on its direction."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"direction->angle"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #")  "
0 0 21 3 3 #"180"
0 0 24 3 15 #"]\302\240\302\240  \302\240\302\240  \302\240"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 4 #")   "
0 0 21 3 1 #"0"
0 0 24 3 15 #"]\302\240\302\240  \302\240\302\240  \302\240"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #")  "
0 0 21 3 3 #"-90"
0 0 24 3 15 #"]\302\240\302\240  \302\240\302\240  \302\240"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 5 #")    "
0 0 21 3 3 #"+90"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"direction->angle"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #")  "
0 0 21 3 3 #"180"
0 0 24 3 15 #")\302\240\302\240  \302\240\302\240  \302\240"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"direction->angle"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 4 #")   "
0 0 21 3 1 #"0"
0 0 24 3 15 #")\302\240\302\240  \302\240\302\240  \302\240"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"direction->angle"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #")  "
0 0 21 3 3 #"-90"
0 0 24 3 15 #")\302\240\302\240  \302\240\302\240  \302\240"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"direction->angle"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 5 #")    "
0 0 21 3 3 #"+90"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; posn+ : posn, posn -> posn"
0 0 24 29 1 #"\n"
0 0 17 3 102
(17
 #"; takes two posn structs and add their x field and y field respectiv"
 #"ely, and return a new posn struct."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"posn+"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 5 #")))) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"posn+"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #" ) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"posn+"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #" ) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #" )) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"posn+"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 6 #"100000"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #" ) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 6 #"-10000"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 5 #"99999"
0 0 24 3 1 #" "
0 0 21 3 5 #"-9999"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 119 7 0 0 24 29 1 #"\n"
0 0 17 3 33 #"; glide-pacman : pacman -> pacman"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; takes in a pacman, and returns a pacman one \"tick\" of time later"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"glide-pacman"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 2 #" ("
0 0 14 3 11 #"pacman-tick"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 3 #") ("
0 0 14 3 10 #"pacman-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 3 #") ("
0 0 14 3 10 #"pacman-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 15 #"pacman-next-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"posn+"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 17 #"direction->action"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pacman-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"pacman-score"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 4 #") ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac0"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 3 #"330"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac4"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"glide-pacman"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac1"
0 0 24 3 2 #") "
0 0 14 3 4 #"pac4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 119 7 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"ghost"
0 0 24 3 2 #" ("
0 0 14 3 4 #"tick"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; make-ghost : number, number, direction, posn -> ghost"
0 0 24 29 1 #"\n"
0 0 17 3 85 10 0 0 24 29 1 #"\n"
0 0 17 3 76
(18
 #";;                   `direction` stores the direction the ghost is m"
 #"oving to"
) 0 0 24 29 1 #"\n"
0 0 17 3 95
(19
 #";;                   `position` is a posn struct, contains (x,y) of "
 #"the ghost, units are pixels"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";;Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")  "
0 0 19 3 14 #"\"LightSkyBlue\""
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"Gainsboro\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;Template"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"ghost-processing"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 10 #"ghost-tick"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 15 #"ghost-direction"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 14 #"ghost-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"ghost-color"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; glide-ghost : ghost -> ghost"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; takes in a ghost, and returns a ghost one \"tick\" of time later"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"glide-ghost"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 2 #" ("
0 0 14 3 10 #"ghost-tick"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 3 #") ("
0 0 14 3 15 #"ghost-direction"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"posn+"
0 0 24 3 2 #" ("
0 0 14 3 14 #"ghost-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 17 #"direction->action"
0 0 24 3 2 #" ("
0 0 14 3 15 #"ghost-direction"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"ghost-color"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"gho1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 19 3 14 #"\"LightSkyBlue\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"gho2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 19 3 14 #"\"LightSkyBlue\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"glide-ghost"
0 0 24 3 1 #" "
0 0 14 3 4 #"gho1"
0 0 24 3 2 #") "
0 0 14 3 4 #"gho2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 119 7 0 0 24 29 1 #"\n"
0 0 17 3 18 #";;Data Definition:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"dot"
0 0 24 3 2 #" ("
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; make-dot : posn, color -> image"
0 0 24 29 1 #"\n"
0 0 17 3 100
(20
 #";    interpretation: `position` is position (x,y) of the dot where i"
 #"t will be put on the background;"
) 0 0 24 29 1 #"\n"
0 0 17 3 52 #";;                   `color` is the color of the dot"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;Examples of data"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"make-dot"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 2 #") "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"make-dot"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"white\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"wall"
0 0 24 3 2 #" ("
0 0 14 3 4 #"axis"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; make-wall : boolean, color -> image"
0 0 24 29 1 #"\n"
0 0 17 3 113
(21
 #";    interpretation: `axis` is a boolean value, if true means wall i"
 #"s horizontal, if false: the wall is vertical;"
) 0 0 24 29 1 #"\n"
0 0 17 3 100
(22
 #";;                   `position` is position (x,y) of the wall where "
 #"it will be put on the background"
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";;                   `color` is the color of the wall"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 3 #" ) "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 2 #") "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"DarkCyan\""
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 17 3 119 7 0 0 24 29 1 #"\n"
0 0 17 3 32 #"; draw-dot : dot, image -> image"
0 0 24 29 1 #"\n"
0 0 17 3 116
(23
 #"; which takes a dot and \342\200\234a-background\342\200\235 image, "
 #"and returns that background image with the dot drawn on top of it."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"dot-radius"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"draw-dot"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-dot"
0 0 24 3 1 #" "
0 0 14 3 12 #"a-background"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 10 #"dot-radius"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"dot-color"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-dot"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dot-position"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-dot"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dot-position"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-dot"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 12 #"a-background"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"background1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"draw-dot"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-dot"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 2 #") "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 2 #") "
0 0 14 3 11 #"background1"
0 0 24 3 2 #") "
0 6           4 21 484
(24
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 25 0) #(struct:po"
 #"int 25 25) #(struct:point 0 25)) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 9/2 9/2 #(struct:translate 8 8 #(struct:elli"
 #"pse 16 16 0 255 \"yellow\"))) #(struct:translate 0 0 #(struct:transl"
 #"ate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 25 0 0 0) #(struct:pulled-point 0 0 25 25 0 0) #("
 #"struct:pulled-point 0 0 0 25 0 0)) 255 \"black\")))))) #(struct:bb 2"
 #"5 25 25) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"draw-dot"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-dot"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"white\""
0 0 24 3 2 #") "
0 0 14 3 11 #"background1"
0 0 24 3 2 #") "
0 6           4 21 482
(25
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 25 0) #(struct:po"
 #"int 25 25) #(struct:point 0 25)) #(struct:translate -7 0 #(struct:ov"
 #"erlay #(struct:translate 0 9/2 #(struct:translate 8 8 #(struct:ellip"
 #"se 16 16 0 255 \"white\"))) #(struct:translate 7 0 #(struct:translat"
 #"e 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:"
 #"pulled-point 0 0 25 0 0 0) #(struct:pulled-point 0 0 25 25 0 0) #(st"
 #"ruct:pulled-point 0 0 0 25 0 0)) 255 \"black\")))))) #(struct:bb 25 "
 #"25 25) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; axis->width : boolean -> integer"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; axis-height : boolean -> integer"
0 0 24 29 1 #"\n"
0 0 17 3 101
(26
 #"; These two functions take a boolean value 'axis', where \"True\" is"
 #" horizontal, \"False\" is Vertical..."
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(27
 #"; and returns a number represents the width and the height, dependin"
 #"g on whether axis is horizontal or not"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"Wall-Thickness"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"axis->width"
0 0 24 3 1 #" "
0 0 14 3 4 #"axis"
0 0 24 3 1 #" "
0 0 14 3 6 #"length"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"axis"
0 0 24 3 1 #" "
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 14 #"Wall-Thickness"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"axis->width"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 3 #"134"
0 0 24 3 2 #") "
0 0 21 3 3 #"134"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"axis->width"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 1 #" "
0 0 21 3 3 #"122"
0 0 24 3 2 #") "
0 0 14 3 14 #"Wall-Thickness"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"axis->height"
0 0 24 3 1 #" "
0 0 14 3 4 #"axis"
0 0 24 3 1 #" "
0 0 14 3 6 #"length"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"axis"
0 0 24 3 1 #" "
0 0 14 3 14 #"Wall-Thickness"
0 0 24 3 1 #" "
0 0 14 3 6 #"length"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"axis->height"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 1 #" "
0 0 21 3 3 #"234"
0 0 24 3 2 #") "
0 0 14 3 14 #"Wall-Thickness"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"axis->height"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 2 #") "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; draw-wall : wall, image -> image"
0 0 24 29 1 #"\n"
0 0 17 3 116
(28
 #"; which takes a wall and \342\200\234a-background\342\200\235 image,"
 #" and returns that background wall with the dot drawn on top of it."
) 0 0 24 29 1 #"\n"
0 0 17 3 146
(29
 #"; position given in the place-image is the center of the width and h"
 #"eight of the background, I get the position the previous two helper "
 #"functions "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-wall"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 1 #" "
0 0 14 3 12 #"a-background"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 2 #" ("
0 0 14 3 11 #"axis->width"
0 0 24 3 2 #" ("
0 0 14 3 9 #"wall-axis"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 3 #") ("
0 0 14 3 11 #"wall-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"axis->height"
0 0 24 3 2 #" ("
0 0 14 3 9 #"wall-axis"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 4 #")  ("
0 0 14 3 11 #"wall-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 3 #")) "
0 0 19 3 7 #"\"solid\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"wall-color"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 13 #"wall-position"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 13 #"wall-position"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 12 #"a-background"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-wall"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 3 #" ) "
0 0 14 3 11 #"background1"
0 0 24 3 2 #") "
0 6           4 21 511
(30
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 25 0) #(struct:po"
 #"int 25 25) #(struct:point 0 25)) #(struct:overlay #(struct:polygon ("
 #"#(struct:pulled-point 0 0 5 -75/2 0 0) #(struct:pulled-point 0 0 20 "
 #"-75/2 0 0) #(struct:pulled-point 0 0 20 125/2 0 0) #(struct:pulled-p"
 #"oint 0 0 5 125/2 0 0)) 255 \"white\") #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 25 0 0 0) #(struct:"
 #"pulled-point 0 0 25 25 0 0) #(struct:pulled-point 0 0 0 25 0 0)) 255"
 #" \"black\"))) #(struct:bb 25 25 25) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-wall"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 3 #" ) "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"DarkCyan\""
0 0 24 3 3 #" ) "
0 0 14 3 11 #"background1"
0 0 24 3 2 #") "
0 6           4 21 504
(31
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 25 0) #(struct:po"
 #"int 25 25) #(struct:point 0 25)) #(struct:overlay #(struct:polygon ("
 #"#(struct:pulled-point 0 0 -22 5 0 0) #(struct:pulled-point 0 0 28 5 "
 #"0 0) #(struct:pulled-point 0 0 28 20 0 0) #(struct:pulled-point 0 0 "
 #"-22 20 0 0)) 255 \"DarkCyan\") #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 25 0 0 0) #(struct:pulled-"
 #"point 0 0 25 25 0 0) #(struct:pulled-point 0 0 0 25 0 0)) 255 \"blac"
 #"k\"))) #(struct:bb 25 25 25) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"pacman-radius"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"pacman-image"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 24 3 1 #" "
0 0 21 3 3 #"315"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"right-triangle"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 21 3 2 #"16"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 13 #"pacman-radius"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; draw-pacman : image, pacman -> image"
0 0 24 29 1 #"\n"
0 0 17 3 85
(32
 #"; which takes \342\200\234a-background\342\200\235 image and returns"
 #" a pacman image on this background."
) 0 0 24 29 1 #"\n"
0 0 17 3 99
(33
 #"; the position given in the place-image is the center of the width a"
 #"nd the height of the background"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-pacman"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 1 #" "
0 0 14 3 12 #"a-background"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #"("
0 0 14 3 6 #"rotate"
0 0 24 3 2 #" ("
0 0 14 3 16 #"direction->angle"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pacman-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 3 #")) "
0 0 14 3 12 #"pacman-image"
0 0 24 3 2 #")("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 3 #")) "
0 0 14 3 12 #"a-background"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-pacman"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac0"
0 0 24 3 1 #" "
0 0 14 3 11 #"background1"
0 0 24 3 1 #")"
0 6           4 21 791
(34
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 25 0) #(struct:po"
 #"int 25 25) #(struct:point 0 25)) #(struct:overlay #(struct:crop (#(s"
 #"truct:point 11.0 10.0) #(struct:point -9.0 10.0) #(struct:point -9.0"
 #" -10.0) #(struct:point 11.0 -10.0)) #(struct:overlay #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 -10.303300858899107 10.606601717798213 "
 #"0 0) #(struct:pulled-point 0 0 0.3033008588991084 3.552713678800501e"
 #"-015 0 0) #(struct:pulled-point 0 0 -10.3033008588991 -10.6066017177"
 #"98213 0 0)) 255 \"black\") #(struct:translate 1.0 0.0 #(struct:ellip"
 #"se 20 20 0 255 \"yellow\")))) #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 0.0 0.0 0 0) #(struct:pulled-point 0 0 25.0 0.0 0 0) #(struct:"
 #"pulled-point 0 0 25.0 25.0 0 0) #(struct:pulled-point 0 0 0.0 25.0 0"
 #" 0)) 255 \"black\"))) #(struct:bb 25 25 25.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-pacman"
0 0 24 3 2 #"  "
0 0 14 3 4 #"pac2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 6           4 21 787
(35
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 40 0) #(struct:po"
 #"int 40 40) #(struct:point 0 40)) #(struct:overlay #(struct:crop (#(s"
 #"truct:point -9.0 10.0) #(struct:point -9.0 -10.0) #(struct:point 11."
 #"0 -10.0) #(struct:point 11.0 10.0)) #(struct:overlay #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 -9.606601717798213 -11.303300858899107 "
 #"0 0) #(struct:pulled-point 0 0 0.9999999999999965 -0.696699141100891"
 #"6 0 0) #(struct:pulled-point 0 0 11.606601717798213 -11.303300858899"
 #"1 0 0)) 255 \"black\") #(struct:translate 1.0 0.0 #(struct:ellipse 2"
 #"0 20 0 255 \"yellow\")))) #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0.0 0.0 0 0) #(struct:pulled-point 0 0 40.0 0.0 0 0) #(struct:pull"
 #"ed-point 0 0 40.0 40.0 0 0) #(struct:pulled-point 0 0 0.0 40.0 0 0))"
 #" 255 \"black\"))) #(struct:bb 40 40 40.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; ghost-leg : color -> image"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; takes a color and returns a one ghost's leg image of this color."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ghost-leg"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 4 #")  ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ghost-leg"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #") "
0 6           4 21 81
(36
 #"(#(struct:translate 3 3 #(struct:ellipse 6 6 0 255 \"red\")) #(struc"
 #"t:bb 6 6 6) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; ghost-top : color -> image"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; takes a color and returns a ghost's leg image of this color."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"ghost-width"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"ghost-height"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ghost-top"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 3 #") ("
0 0 14 3 15 #"underlay/offset"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 11 #"ghost-width"
0 0 24 3 1 #" "
0 0 14 3 12 #"ghost-height"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 15 #"underlay/offset"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 21 3 2 #"-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ghost-top"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Fuchsia\""
0 0 24 3 2 #") "
0 6           4 21 480
(37
 #"(#(struct:overlay #(struct:translate 3 4 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:translate 2 2 #(struct:ellipse 4 4 0 255 \"bla"
 #"ck\"))) #(struct:translate 4 0 #(struct:translate 2 2 #(struct:ellip"
 #"se 4 4 0 255 \"black\"))))) #(struct:translate 0 0 #(struct:translat"
 #"e 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:"
 #"pulled-point 0 0 14 0 0 0) #(struct:pulled-point 0 0 14 16 0 0) #(st"
 #"ruct:pulled-point 0 0 0 16 0 0)) 255 \"Fuchsia\")))) #(struct:bb 14 "
 #"16 16) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; ghost-image : color -> image"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; takes a color and returns a ghost image of this color."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"ghost-image"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 3 #") ("
0 0 14 3 5 #"above"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ghost-top"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 6 #"beside"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ghost-leg"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 3 #") ("
0 0 14 3 9 #"ghost-leg"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 2 #")("
0 0 14 3 9 #"ghost-leg"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"ghost-image"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Fuchsia\""
0 0 24 3 2 #") "
0 6           4 21 866
(38
 #"(#(struct:overlay #(struct:translate 2 0 #(struct:overlay #(struct:t"
 #"ranslate 3 4 #(struct:overlay #(struct:translate 0 0 #(struct:transl"
 #"ate 2 2 #(struct:ellipse 4 4 0 255 \"black\"))) #(struct:translate 4"
 #" 0 #(struct:translate 2 2 #(struct:ellipse 4 4 0 255 \"black\"))))) "
 #"#(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 14 0 0 0) #"
 #"(struct:pulled-point 0 0 14 16 0 0) #(struct:pulled-point 0 0 0 16 0"
 #" 0)) 255 \"Fuchsia\"))))) #(struct:translate 0 16 #(struct:overlay #"
 #"(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:translate 3 3 #(struct:ellipse 6 6 0 255 \"Fuchsia\"))) #(struct:"
 #"translate 6 0 #(struct:translate 3 3 #(struct:ellipse 6 6 0 255 \"Fu"
 #"chsia\"))))) #(struct:translate 12 0 #(struct:translate 3 3 #(struct"
 #":ellipse 6 6 0 255 \"Fuchsia\")))))) #(struct:bb 18 22 22) #f)"
) 0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; draw-ghost : ghost, image -> image"
0 0 24 29 1 #"\n"
0 0 17 3 84
(39
 #"; which takes \342\200\234a-background\342\200\235 image and returns"
 #" a ghost image on this background."
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #"; you may use \"LightSkyBlue\" as a color for the ghost"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"Plum\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 19 3 14 #"\"MediumPurple\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-ghost"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #" "
0 0 14 3 12 #"a-background"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"ghost-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"ghost-color"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 14 #"ghost-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 14 #"ghost-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 3 #")) "
0 0 14 3 12 #"a-background"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 127
(40
 #";(place-image (ghost-image (ghost-color gho)) (/ (image-width a-back"
 #"ground) 2) (/ (image-height a-background) 2) a-background))"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-ghost"
0 0 24 3 1 #" "
0 0 14 3 2 #"g1"
0 0 24 3 1 #" "
0 0 14 3 11 #"background1"
0 0 24 3 2 #" )"
0 6           4 21 890
(41
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 25 0) #(struct:po"
 #"int 25 25) #(struct:point 0 25)) #(struct:overlay #(struct:overlay #"
 #"(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay #"
 #"(struct:translate -1 -3 #(struct:ellipse 4 4 0 255 \"black\")) #(str"
 #"uct:translate 3 -3 #(struct:ellipse 4 4 0 255 \"black\"))) #(struct:"
 #"polygon (#(struct:pulled-point 0 0 -6 -9 0 0) #(struct:pulled-point "
 #"0 0 8 -9 0 0) #(struct:pulled-point 0 0 8 7 0 0) #(struct:pulled-poi"
 #"nt 0 0 -6 7 0 0)) 255 \"Plum\")) #(struct:translate -5 10 #(struct:e"
 #"llipse 6 6 0 255 \"Plum\"))) #(struct:translate 1 10 #(struct:ellips"
 #"e 6 6 0 255 \"Plum\"))) #(struct:translate 7 10 #(struct:ellipse 6 6"
 #" 0 255 \"Plum\"))) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 25 0 0 0) #(struct:pulled-point 0 0 25"
 #" 25 0 0) #(struct:pulled-point 0 0 0 25 0 0)) 255 \"black\"))) #(str"
 #"uct:bb 25 25 25) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-ghost"
0 0 24 3 1 #" "
0 0 14 3 2 #"g2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 2 #"))"
0 6           4 21 925
(42
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 40 0) #(struct:po"
 #"int 40 40) #(struct:point 0 40)) #(struct:overlay #(struct:overlay #"
 #"(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay #"
 #"(struct:translate 14 11 #(struct:ellipse 4 4 0 255 \"black\")) #(str"
 #"uct:translate 18 11 #(struct:ellipse 4 4 0 255 \"black\"))) #(struct"
 #":polygon (#(struct:pulled-point 0 0 9 5 0 0) #(struct:pulled-point 0"
 #" 0 23 5 0 0) #(struct:pulled-point 0 0 23 21 0 0) #(struct:pulled-po"
 #"int 0 0 9 21 0 0)) 255 \"MediumPurple\")) #(struct:translate 10 24 #"
 #"(struct:ellipse 6 6 0 255 \"MediumPurple\"))) #(struct:translate 16 "
 #"24 #(struct:ellipse 6 6 0 255 \"MediumPurple\"))) #(struct:translate"
 #" 22 24 #(struct:ellipse 6 6 0 255 \"MediumPurple\"))) #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 "
 #"0 0 0) #(struct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 "
 #"0 0 40 0 0)) 255 \"white\"))) #(struct:bb 40 40 40) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 119 7 0 0 24 29 1 #"\n"
0 0 17 3 47 #";pacman-handle-key : pacman, keypress -> pacman"
0 0 24 29 1 #"\n"
0 0 17 3 116
(43
 #";takes a pacman and a keypress (e.g. \"z\" or \"right\"), and return"
 #"s a new pacman which has responded to that keypress."
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(44
 #";Now the keypress will take effect immediately and changes the posit"
 #"ion"
) 0 0 24 29 1 #"\n"
0 0 17 3 108
(45
 #";in our final version we may store the keystroke until the next time"
 #" the pacman can reaches an intersection."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pacman-handle-key"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 10 #"key-event?"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 15 #")\302\240\302\240  \302\240\302\240  \302\240"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 62
#"; (make-pacman (pacman-tick Pac) (pacman-age Pac) key  \"right\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 2 #" ("
0 0 14 3 11 #"pacman-tick"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 3 #") ("
0 0 14 3 10 #"pacman-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 3 #") ("
0 0 14 3 10 #"pacman-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #") "
0 0 14 3 3 #"key"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 5 #"posn+"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 17 #"direction->action"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pacman-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 5 #"))) ("
0 0 14 3 12 #"pacman-score"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 4 #"])) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pacman-handle-key"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 8          10 21 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" )"
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pacman-handle-key"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac1"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #") ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 8          10 21 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pacman-handle-key"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac1"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"joe\""
0 0 24 3 2 #") "
0 0 14 3 4 #"pac1"
0 0 24 3 2 #") "
0 0 17 3 17 #"; nothing changes"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pacman-handle-key"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac1"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #") ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 8          10 21 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 119 7 0 0 24 29 1 #"\n"
0 0 17 3 31 #"; draw-worldd : pacman -> image"
0 0 24 29 1 #"\n"
0 0 17 3 92
(46
 #"; takes in a pacman and returns an image: that pacman placed onto a("
 #"n otherwise blank) board"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"Big-Background"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"DarkBlue\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-worldd"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 3 #") ("
0 0 14 3 15 #"underlay/offset"
0 0 24 3 1 #" "
0 0 14 3 11 #"background1"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 11 #"draw-pacman"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 1 #" "
0 0 14 3 11 #"background1"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"  "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-worldd"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac3"
0 0 24 3 1 #")"
0 6           4 21 988
(47
 #"(#(struct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"25 0) #(struct:point 25 25) #(struct:point 0 25)) #(struct:overlay #"
 #"(struct:crop (#(struct:point 10.0 10.0) #(struct:point -10.0 10.0) #"
 #"(struct:point -10.0 -10.0) #(struct:point 10.0 -10.0)) #(struct:over"
 #"lay #(struct:polygon (#(struct:pulled-point 0 0 -11.303300858899107 "
 #"10.606601717798213 0 0) #(struct:pulled-point 0 0 -0.696699141100891"
 #"6 3.552713678800501e-015 0 0) #(struct:pulled-point 0 0 -11.30330085"
 #"88991 -10.606601717798213 0 0)) 255 \"black\") #(struct:translate 0."
 #"0 0.0 #(struct:ellipse 20 20 0 255 \"yellow\")))) #(struct:polygon ("
 #"#(struct:pulled-point 0 0 0.0 0.0 0 0) #(struct:pulled-point 0 0 25."
 #"0 0.0 0 0) #(struct:pulled-point 0 0 25.0 25.0 0 0) #(struct:pulled-"
 #"point 0 0 0.0 25.0 0 0)) 255 \"black\"))) #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 25 0 0 0) #(str"
 #"uct:pulled-point 0 0 25 25 0 0) #(struct:pulled-point 0 0 0 25 0 0))"
 #" 255 \"black\")) #(struct:bb 25 25 25.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 119 7 0 0 24 29 1 #"\n"
0 0 17 3 50 #"; pacman-collide-ghost? : pacman, ghost -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; returns true if the pacman and the ghost collide"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"pacman-collide-ghost?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"overlap?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 13 #"pacman-radius"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 13 #"pacman-radius"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 14 #"ghost-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 14 #"ghost-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 3 #")) "
0 0 14 3 11 #"ghost-width"
0 0 24 3 1 #" "
0 0 14 3 12 #"ghost-height"
0 0 24 3 31 #" ))                            "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac5"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac6"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #"  "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"gho5"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 19 3 9 #"\"DimGray\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"gho6"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 19 3 15 #"\"PaleTurquoise\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 21 #"pacman-collide-ghost?"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac5"
0 0 24 3 1 #" "
0 0 14 3 4 #"gho5"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 21 #"pacman-collide-ghost?"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac6"
0 0 24 3 1 #" "
0 0 14 3 4 #"gho6"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 96
(48
 #";-------------------------------------------------------------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(49
 #";----------------------------------------------HW05A----------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 96 48 0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Name: Yusuf Elnady"
0 0 24 29 1 #"\n"
0 0 17 3 88
(50
 #"; HW05 --https://www.radford.edu/~itec380/2020spring-ibarland/Homewo"
 #"rks/lists/lists.html"
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(51
 #";-----------------------------------------------Q01-----------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 44 #"; count-bigs : real, list-of-real \342\206\222 natnum"
0 0 24 29 1 #"\n"
0 0 17 3 105
(52
 #"; takes in a threshold and a list of numbers, and returns how many o"
 #"f them are larger than the threshold."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 14 3 9 #"threshold"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 24 3 3 #")  "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 24 3 4 #") ( "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 24 3 2 #") "
0 0 14 3 9 #"threshold"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 14 3 9 #"threshold"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 5 #"-1000"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"0"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"( "
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 3 #".01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.001"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 4 #"-.01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.001"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 4 #"-.01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 6 #"-0.002"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 6 #"-0.001"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 4 #"9999"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 4 #"9999"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 4 #"9999"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 4 #"9999"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"0"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-bigs"
0 0 24 3 1 #" "
0 0 21 3 4 #"9998"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 4 #"9999"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 4 #"9999"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 4 #"9999"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"3"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 96
(53
 #";-----------------------------------------------Q02-----------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 45 #"; map-sqr : list-of-number \342\206\222 list-of-number"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; squares each number in the given list;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"map-sqr"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 24 3 4 #")  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 7 #"map-sqr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lon"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"map-sqr"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")  "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"map-sqr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 5 #"))  ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"49"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"map-sqr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 6 #")))  ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"81"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"49"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 96
(54
 #";-----------------------------------------------Q03-----------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Data Definition:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; a LoG (\"list-of-ghost is:"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";      empty, OR"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";      (make-cons [ghost] [LoG])   ; \"constructed list\""
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"Plum\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"g02"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"44"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 2 #") "
0 0 19 3 14 #"\"MediumPurple\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"g03"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 19 3 12 #"\"Chartreuse\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"g04"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 19 3 12 #"\"DarkSalmon\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Examples of LoG:"
0 0 24 29 1 #"\n"
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g02"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g02"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g03"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g04"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Template for  list-of-ghost processing function."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"func-for-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-log"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-log"
0 0 24 3 3 #")  "
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-log"
0 0 24 3 5 #")   ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-log"
0 0 24 3 3 #") ("
0 0 14 3 13 #"func-for-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-log"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"DarkCyan\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"w02"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"DarkSalmon\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-dot"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 2 #") "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"d02"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-dot"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"31"
0 0 24 3 1 #" "
0 0 21 3 2 #"33"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"white\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; Examples of LoW and LoD"
0 0 24 29 1 #"\n"
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w02"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d02"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 96
(55
 #";-----------------------------------------------Q04-----------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"p0"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"33"
0 0 24 3 1 #" "
0 0 21 3 2 #"33"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 3 #"330"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"p3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; pacman-collide-ghost? : pacman, wall -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; returns true if the pacman collides with a single wall"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #"  ("
0 0 14 3 20 #"pacman-collide-wall?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"overlap?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 13 #"pacman-radius"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 13 #"pacman-radius"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 13 #"wall-position"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 13 #"wall-position"
0 0 24 3 2 #"  "
0 0 14 3 6 #"a-wall"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"axis->width"
0 0 24 3 2 #" ("
0 0 14 3 9 #"wall-axis"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 3 #") ("
0 0 14 3 11 #"wall-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"axis->height"
0 0 24 3 2 #" ("
0 0 14 3 9 #"wall-axis"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 4 #")  ("
0 0 14 3 11 #"wall-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pacman-collide-wall?"
0 0 24 3 1 #" "
0 0 14 3 2 #"p0"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pacman-collide-wall?"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 3 #"w02"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; pacman-collide-walls? : pacman, list-of-wall -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 78
(56
 #"; determines whether a single pacman overlaps with any wall in a lis"
 #"t-of-wall."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"pacman-collide-walls?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-loW"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-loW"
0 0 24 3 3 #")  "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-loW"
0 0 24 3 5 #")   ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 20 #"pacman-collide-wall?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-loW"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 21 #"pacman-collide-walls?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-loW"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 21 #"pacman-collide-walls?"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 1 #"("
0 0 14 3 21 #"pacman-collide-walls?"
0 0 24 3 1 #" "
0 0 14 3 2 #"p0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 21 #"pacman-collide-walls?"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; ghost-collide-wall? : ghost, wall -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; returns true if the ghost collides with a single wall"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"ghost-collide-wall?"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"overlap?"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 14 #"ghost-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 14 #"ghost-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 3 #")) "
0 0 14 3 11 #"ghost-width"
0 0 24 3 1 #" "
0 0 14 3 12 #"ghost-height"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 13 #"wall-position"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 13 #"wall-position"
0 0 24 3 2 #"  "
0 0 14 3 6 #"a-wall"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"axis->width"
0 0 24 3 2 #" ("
0 0 14 3 9 #"wall-axis"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 4 #")  ("
0 0 14 3 11 #"wall-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"axis->height"
0 0 24 3 2 #" ("
0 0 14 3 9 #"wall-axis"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 4 #")  ("
0 0 14 3 11 #"wall-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-wall"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"ghost-collide-wall?"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"ghost-collide-wall?"
0 0 24 3 1 #" "
0 0 14 3 3 #"g02"
0 0 24 3 1 #" "
0 0 14 3 3 #"w02"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; ghost-collide-walls? : ghost, list-of-wall -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 77
(57
 #"; determines whether a single ghost overlaps with any wall in a list"
 #"-of-wall."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"ghost-collide-walls?"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 3 #")  "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 5 #")   ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 19 #"ghost-collide-wall?"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 20 #"ghost-collide-walls?"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 20 #"ghost-collide-walls?"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 20 #"ghost-collide-walls?"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 20 #"ghost-collide-walls?"
0 0 24 3 1 #" "
0 0 14 3 3 #"g02"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w02"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #"  "
0 0 14 3 3 #"w02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; pacman-collide-ghosts? : pacman, list-of-ghost -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 71
(58
 #"; determines whether pacman overlaps with any ghost in a list-of-gho"
 #"st."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"pacman-collide-ghosts?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 3 #")  "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 5 #")   ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 21 #"pacman-collide-ghost?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 22 #"pacman-collide-ghosts?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"pacman-collide-ghosts?"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"gho5"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"gho6"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"pacman-collide-ghosts?"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac6"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"gho6"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #") ) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; pacman-collide-dot? : pacman, dot -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; returns true if the pacman collides with a single dot"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"pacman-collide-dot?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-dot"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"overlap?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 13 #"pacman-radius"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 13 #"pacman-radius"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dot-position"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-dot"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dot-position"
0 0 24 3 2 #"  "
0 0 14 3 5 #"a-dot"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 10 #"dot-radius"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 10 #"dot-radius"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"pacman-collide-dot?"
0 0 24 3 1 #" "
0 0 14 3 2 #"p0"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"pacman-collide-dot?"
0 0 24 3 1 #" "
0 0 14 3 2 #"p0"
0 0 24 3 1 #" "
0 0 14 3 3 #"d02"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54
#"; dots-remaining : pacman, List-of-dot \342\206\222 List-of-dot"
0 0 24 29 1 #"\n"
0 0 17 3 77
(59
 #"; returns all dots in the given list which are not colliding with th"
 #"e pacman."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"dots-remaining"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 4 #")  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 19 #"pacman-collide-dot?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 14 #"dots-remaining"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 14 #"dots-remaining"
0 0 24 3 1 #" "
0 0 14 3 3 #"pac"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                            )]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"dots-remaining"
0 0 24 3 1 #" "
0 0 14 3 2 #"p0"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"dots-remaining"
0 0 24 3 1 #" "
0 0 14 3 2 #"p0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"dots-remaining"
0 0 24 3 1 #" "
0 0 14 3 2 #"p0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"dots-remaining"
0 0 24 3 1 #" "
0 0 14 3 2 #"p0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 96
(60
 #";-----------------------------------------------Q05-----------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 44 #"; draw-ghosts: List-of-ghost, Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 111
(61
 #"; take a list-of-ghosts and a background-image, and return the backg"
 #"round image with the ghosts overlaid on it."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"gh1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"Plum\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"gh2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 19 3 14 #"\"MediumPurple\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-ghosts"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 1 #" "
0 0 14 3 12 #"a-background"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 2 #") "
0 0 14 3 12 #"a-background"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 3 #") ("
0 0 14 3 10 #"draw-ghost"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 3 #") ("
0 0 14 3 11 #"draw-ghosts"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 2 #") "
0 0 14 3 12 #"a-background"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-ghosts"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 14 #"Big-Background"
0 0 24 3 2 #") "
0 0 14 3 14 #"Big-Background"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-ghosts"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 14 #"Big-Background"
0 0 24 3 4 #")  ("
0 0 14 3 10 #"draw-ghost"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 1 #" "
0 0 14 3 14 #"Big-Background"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-ghosts"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 14 3 14 #"Big-Background"
0 0 24 3 3 #") ("
0 0 14 3 10 #"draw-ghost"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-ghost"
0 0 24 3 1 #" "
0 0 14 3 3 #"g02"
0 0 24 3 1 #" "
0 0 14 3 14 #"Big-Background"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 119
(62
 #"; When creating the expected-output for your test cases, feel free t"
 #"o include the calls to draw-ghost (singular), etc.."
) 0 0 24 29 1 #"\n"
0 0 17 3 117
(63
 #"; Creating the expected-result for a test for a list-of-length-2 wil"
 #"l help you understand what your code needs to do."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; draw-walls: List-of-wall, Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 109
(64
 #"; take a list-of-walls and a background-image, and return the backgr"
 #"ound image with the walls overlaid on it."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-walls"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 1 #" "
0 0 14 3 12 #"a-background"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 2 #") "
0 0 14 3 12 #"a-background"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 3 #") ("
0 0 14 3 9 #"draw-wall"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 3 #") ("
0 0 14 3 10 #"draw-walls"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 2 #") "
0 0 14 3 12 #"a-background"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-walls"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 14 #"Big-Background"
0 0 24 3 2 #") "
0 0 14 3 14 #"Big-Background"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-walls"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 14 #"Big-Background"
0 0 24 3 4 #")  ("
0 0 14 3 9 #"draw-wall"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 1 #" "
0 0 14 3 14 #"Big-Background"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-walls"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 14 3 14 #"Big-Background"
0 0 24 3 3 #") ("
0 0 14 3 9 #"draw-wall"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-wall"
0 0 24 3 1 #" "
0 0 14 3 3 #"w02"
0 0 24 3 1 #" "
0 0 14 3 14 #"Big-Background"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; draw-dots: List-of-dot, Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 107
(65
 #"; take a list-of-dots and a background-image, and return the backgro"
 #"und image with the dots overlaid on it."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-dots"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 1 #" "
0 0 14 3 12 #"a-background"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 2 #") "
0 0 14 3 12 #"a-background"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 3 #") ("
0 0 14 3 8 #"draw-dot"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 3 #") ("
0 0 14 3 9 #"draw-dots"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 2 #") "
0 0 14 3 12 #"a-background"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-dots"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 14 #"Big-Background"
0 0 24 3 2 #") "
0 0 14 3 14 #"Big-Background"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-dots"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 14 #"Big-Background"
0 0 24 3 4 #")  ("
0 0 14 3 8 #"draw-dot"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 1 #" "
0 0 14 3 14 #"Big-Background"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-dots"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 14 3 14 #"Big-Background"
0 0 24 3 3 #") ("
0 0 14 3 8 #"draw-dot"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 2 #" ("
0 0 14 3 8 #"draw-dot"
0 0 24 3 1 #" "
0 0 14 3 3 #"d02"
0 0 24 3 1 #" "
0 0 14 3 14 #"Big-Background"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 96
(66
 #";-----------------------------------------------Q06-----------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 7 #"())))))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; index-of : string, list-of-string -> natnum"
0 0 24 29 1 #"\n"
0 0 17 3 91
(67
 #"; takes a string `item`, and returns the index (1-based)/ of it in t"
 #"he given string `a-LoS`"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #"; if `item` is not found in the list, it returns -1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 2 #") "
0 0 21 3 2 #"-1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"joe\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 21 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; get-at : natnum, list-of-string -> string"
0 0 24 29 1 #"\n"
0 0 17 3 85
(68
 #"; takes an index (1-based) `num` and list `a-LoS` and return the str"
 #"ing at this index"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"get-at"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 2 #") "
0 0 21 3 2 #"-1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 6 #"get-at"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"get-at"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"hi"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())) "
0 0 21 3 1 #"'"
0 0 14 3 2 #"hi"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"get-at"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bye"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"hi"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bye"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"get-at"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bye"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"hi"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))) "
0 0 21 3 1 #"'"
0 0 14 3 2 #"hi"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"get-at"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 21 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"get-at"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 21 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; get-next : string, list-of-string -> string"
0 0 24 29 1 #"\n"
0 0 17 3 87
(69
 #"; takes an `item` to search for in the list `a-LoS`, and returns the"
 #" next item after it"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-next"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"get-at"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 3 #")) "
0 0 14 3 5 #"a-LoS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #"="
0 0 24 3 2 #"  "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"get-at"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 3 #")) "
0 0 14 3 5 #"a-LoS"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"get-at"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"get-at"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoS"
0 0 24 3 3 #")) "
0 0 14 3 5 #"a-LoS"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-next"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-next"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-next"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-next"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; move-ghost : ghost, list-of-wall \342\206\222 ghost"
0 0 24 29 1 #"\n"
0 0 17 3 100
(70
 #"; checks whether gliding ghost would end up colliding with a wall, i"
 #"f so it takes another direction."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"move-ghost"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 20 #"ghost-collide-walls?"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 2 #" ("
0 0 14 3 10 #"ghost-tick"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 3 #") ("
0 0 14 3 8 #"get-next"
0 0 24 3 2 #" ("
0 0 14 3 15 #"ghost-direction"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 2 #") "
0 0 14 3 15 #"directions-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"posn+"
0 0 24 3 2 #" ("
0 0 14 3 14 #"ghost-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 17 #"direction->action"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-next"
0 0 24 3 2 #" ("
0 0 14 3 15 #"ghost-direction"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 2 #") "
0 0 14 3 15 #"directions-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 11 #"ghost-color"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 2 #" ("
0 0 14 3 10 #"ghost-tick"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 4 #")  ("
0 0 14 3 15 #"ghost-direction"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"posn+"
0 0 24 3 2 #" ("
0 0 14 3 14 #"ghost-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 17 #"direction->action"
0 0 24 3 2 #" ("
0 0 14 3 15 #"ghost-direction"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 11 #"ghost-color"
0 0 24 3 1 #" "
0 0 14 3 3 #"gho"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"Rewall"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"595"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #" ) "
0 0 21 3 3 #"600"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"my-testGho1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"Aqua\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"my-testGho2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 2 #") "
0 0 19 3 9 #"\"Fuchsia\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"Lewall"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #" ) "
0 0 21 3 3 #"600"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"test-walls"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"Rewall"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"Lewall"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"move-ghost"
0 0 24 3 1 #" "
0 0 14 3 11 #"my-testGho1"
0 0 24 3 2 #"  "
0 0 14 3 10 #"test-walls"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"201"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"Aqua\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"move-ghost"
0 0 24 3 1 #" "
0 0 14 3 11 #"my-testGho2"
0 0 24 3 2 #"  "
0 0 14 3 10 #"test-walls"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"399"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 2 #") "
0 0 19 3 9 #"\"Fuchsia\""
0 0 24 3 3 #")) "
0 0 17 3 22 #";changes his direction"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; move-ghosts : list-of-ghost, list-of-wall -> list-of-ghost"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; returns a list of ghosts that have been moved after one tick"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"move-ghosts"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"move-ghost"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 2 #") "
0 0 14 3 5 #"a-LoW"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 11 #"move-ghosts"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 2 #") "
0 0 14 3 5 #"a-LoW"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 17 3 96
(71
 #";-----------------------------------------------Q07-----------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; move-pacman : pacman, list-of-wall \342\206\222 ghost"
0 0 24 29 1 #"\n"
0 0 17 3 95
(72
 #"; determines the direction of the pacman, depending on his current d"
 #"ir and the cached direction"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"move-pacman"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 21 #"pacman-collide-walls?"
0 0 24 3 1 #" "
0 0 17 3 58
#";;First check if it will collide with the next direction >"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 12 #"glide-pacman"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 2 #" ("
0 0 14 3 11 #"pacman-tick"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #")("
0 0 14 3 10 #"pacman-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #")("
0 0 14 3 15 #"pacman-next-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #")("
0 0 14 3 15 #"pacman-next-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #")("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #")("
0 0 14 3 12 #"pacman-score"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 8 #")))     "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 5 #"a-LoW"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 60
#";;next line, now next-dir is not working, check current work"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 65
#";;now a condition to see if it will collide with the current wall"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 21 #"pacman-collide-walls?"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"glide-pacman"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 2 #" ("
0 0 14 3 11 #"pacman-tick"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #")("
0 0 14 3 10 #"pacman-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #") "
0 0 17 3 56 #";;if again it's not working then try any other direction"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 8 #"get-next"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-next-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #") "
0 0 14 3 15 #"directions-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 8 #"get-next"
0 0 24 3 2 #" ("
0 0 14 3 15 #"pacman-next-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #") "
0 0 14 3 15 #"directions-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #")("
0 0 14 3 12 #"pacman-score"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 4 #"))) "
0 0 17 3 47 #";;if also current line collides, then just STOP"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"glide-pacman"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 3 #")) "
0 0 17 3 62
#";;current direction is working, so glide with same current dir"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 37 #";;next line, when next-dir is working"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"glide-pacman"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 2 #" ("
0 0 14 3 11 #"pacman-tick"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #")("
0 0 14 3 10 #"pacman-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #")("
0 0 14 3 15 #"pacman-next-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #")("
0 0 14 3 15 #"pacman-next-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #")("
0 0 14 3 15 #"pacman-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 2 #")("
0 0 14 3 12 #"pacman-score"
0 0 24 3 1 #" "
0 0 14 3 3 #"Pac"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"      ))   "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"move-pacman"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac3"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 2 #"  "
0 0 21 3 2 #"10"
0 0 24 3 2 #"  "
0 0 21 3 1 #"4"
0 0 24 3 2 #"  "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #"  "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")  "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"move-pacman"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"Twall"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"move-pacman"
0 0 24 3 1 #" "
0 0 14 3 5 #"myPac"
0 0 24 3 1 #" "
0 0 14 3 5 #"walls"
0 0 24 3 3 #") ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"299"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"move-pacman"
0 0 24 3 1 #" "
0 0 14 3 4 #"pac0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"Bwall"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 5 #"))  ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 96
(73
 #";-----------------------------------------------Q08-----------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";;1-Data Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 6 #"pacman"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoG"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoW"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 72
(74
 #"; make-world : pacman, list-of-dot, list-of-ghost, list-of-wall -> w"
 #"orld"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(75
 #";    interpretation: `pac` a pacman ; `a-LoD` a list contains the do"
 #"ts in the world"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(76
 #";;                   `a-LoG` a list contatins the ghosts in the worl"
 #"d"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";;                   `a-LoW` a list contatins the walls in the world"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;2-Examples of data"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 2 #"p0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d02"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 2 #"p3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"d02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"g02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"w01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;3-Template"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"world-processings"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-pacman"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-a-LoD"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-a-LoG"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-a-LoW"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; update-world : world \342\206\222 world"
0 0 24 29 1 #"\n"
0 0 17 3 42
#"; eturns a new world one \342\200\234tick\342\200\235 later."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"update-world"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 11 #"move-pacman"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"world-pacman"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-a-LoW"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"dots-remaining"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-pacman"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 4 #")  ("
0 0 14 3 11 #"world-a-LoD"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"move-ghosts"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"world-a-LoG"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 2 #")("
0 0 14 3 11 #"world-a-LoW"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"world-a-LoW"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 96
(77
 #";-----------------------------------------------Q09-----------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; world-handle-key : world, keypress \342\206\222 world"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; returns a new world updated to handle the keypress."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-handle-key"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pacman-handle-key"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-pacman"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 2 #") "
0 0 14 3 3 #"key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"world-a-LoD"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 4 #")  ("
0 0 14 3 11 #"world-a-LoG"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 2 #")("
0 0 14 3 11 #"world-a-LoW"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-handle-key"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-world"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pacman-handle-key"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-pacman"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-world"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                             ("
0 0 14 3 11 #"world-a-LoD"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-world"
0 0 24 3 4 #")  ("
0 0 14 3 11 #"world-a-LoG"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-world"
0 0 24 3 2 #")("
0 0 14 3 11 #"world-a-LoW"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-world"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-handle-key"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-world"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"pacman-handle-key"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-pacman"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-world"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                             ("
0 0 14 3 11 #"world-a-LoD"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-world"
0 0 24 3 4 #")  ("
0 0 14 3 11 #"world-a-LoG"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-world"
0 0 24 3 2 #")("
0 0 14 3 11 #"world-a-LoW"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-world"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 96
(78
 #";-----------------------------------------------Q10-----------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 29 #"; draw-world : world -> image"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; draws the world onto a blank background."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"bck"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"DarkBlue\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; create a list of my walls to be passed ;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"Twall"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #" ) "
0 0 21 3 3 #"600"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"Bwall"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"595"
0 0 24 3 3 #" ) "
0 0 21 3 3 #"600"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"Lwall"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #" ) "
0 0 21 3 3 #"600"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"Rwall"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"595"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #" ) "
0 0 21 3 3 #"600"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"2ndwall"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #" ) "
0 0 21 3 3 #"320"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"3rdwall"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 3 #" ) "
0 0 21 3 3 #"320"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"4thwall"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"550"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 3 #" ) "
0 0 21 3 3 #"320"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"5thwall"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-wall"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #" ) "
0 0 21 3 3 #"320"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"walls"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"Twall"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"Bwall"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"Lwall"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"Rwall"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 7 #"2ndwall"
0 0 24 29 1 #"\n"
0 0 24 3 69
(79
 #"                                                                    "
 #"("
) 0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 7 #"3rdwall"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 7 #"4thwall"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 7 #"5thwall"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"myPac"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-pacman"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #"("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 2 #") "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"myGho1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"Aqua\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"myGho2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 2 #") "
0 0 19 3 9 #"\"Fuchsia\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"myGho3"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"Red\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"myGho4"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #") "
0 0 19 3 12 #"\"DarkOrange\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"ghosts"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"myGho1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"myGho2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"myGho3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"myGho4"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; create-dots : natnum, natnum, natnum -> list-of-dot"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; a simple function to create some dots easily"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"create-dots"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-dot"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-dot"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 3 #")) "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 11 #"create-dots"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"create-dots"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-dot"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 2 #") "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-dot"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 3 #"530"
0 0 24 3 2 #") "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #"("
0 0 14 3 8 #"make-dot"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"55"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 2 #") "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #"("
0 0 14 3 8 #"make-dot"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"55"
0 0 24 3 1 #" "
0 0 21 3 3 #"530"
0 0 24 3 1 #")"
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                           "
0 0 14 3 5 #"empty"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"create-dots"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"dots"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"create-dots"
0 0 24 3 1 #" "
0 0 21 3 2 #"22"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-world"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"myPac"
0 0 24 3 1 #" "
0 0 14 3 4 #"dots"
0 0 24 3 1 #" "
0 0 14 3 6 #"ghosts"
0 0 24 3 1 #" "
0 0 14 3 5 #"walls"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-world"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"draw-pacman"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-pacman"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 3 #") ("
0 0 14 3 10 #"draw-walls"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-a-LoW"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 3 #") ("
0 0 14 3 11 #"draw-ghosts"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-a-LoG"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 3 #") ("
0 0 14 3 9 #"draw-dots"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-a-LoD"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 3 #")  "
0 0 14 3 3 #"bck"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"myD01"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-dot"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"45"
0 0 24 3 1 #" "
0 0 21 3 2 #"33"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"white\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"myD02"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-dot"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"33"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"white\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 17 3 96
(80
 #";-----------------------------------------------Q11-----------------"
 #"----------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #"; length : list-of-dot -> natnum"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; Return the length of `a-LoD`."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-length"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-length"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-LoD"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-length"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-length"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"myD01"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-length"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"myD01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"myD02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-length"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"myD01"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"myD02"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"myD02"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; game-over? : world \342\206\222 boolean"
0 0 24 29 1 #"\n"
0 0 17 3 112
(81
 #"; returns whether the game is over (that is, if the pacman is collid"
 #"ing with a ghost, or there are no more dots)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 22 #"pacman-collide-ghosts?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-pacman"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-a-LoG"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-length"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-a-LoD"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-world"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-over?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"myPac"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 6 #"ghosts"
0 0 24 3 1 #" "
0 0 14 3 5 #"walls"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-over?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"myPac"
0 0 24 3 1 #" "
0 0 14 3 4 #"dots"
0 0 24 3 1 #" "
0 0 14 3 6 #"ghosts"
0 0 24 3 1 #" "
0 0 14 3 5 #"walls"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 11 #")          "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-over?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"myPac"
0 0 24 3 1 #" "
0 0 14 3 4 #"dots"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-ghost"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 2 #") "
0 0 19 3 12 #"\"DarkOrange\""
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"walls"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 8 #"big-bang"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-world"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 16 #"world-handle-key"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 12 #"update-world"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 10 #"draw-world"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 10 #"game-over?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
